#include <stdio.h>

#define NUM_PARTITIONS 6

int partitions[NUM_PARTITIONS] = {300, 600, 350, 200, 750, 125};
int used[NUM_PARTITIONS] = {0};

void print_partitions() {
    printf("Memory partitions:\n");
    for (int i = 0; i < NUM_PARTITIONS; i++) {
        printf("%d KB ", partitions[i]);
    }
    printf("\n");
}

int best_fit(int size) {
    int best_index = -1;
    int m#include <stdio.h>

#define NUM_PARTITIONS 6

int partitions[NUM_PARTITIONS] = {300, 600, 350, 200, 750, 125};
int used[NUM_PARTITIONS] = {0};

void print_partitions() {
    printf("Memory partitions:\n");
    for (int i = 0; i < NUM_PARTITIONS; i++) {
        printf("%d KB ", partitions[i]);
    }#include <stdio.h>

#define NUM_PARTITIONS 6

int partitions[NUM_PARTITIONS] = {300, 600, 350, 200, 750, 125};
int used[NUM_PARTITIONS] = {0};

void print_partitions() {
    printf("Memory partitions:\n");
    for (int i = 0; i < NUM_PARTITIONS; i++) {
        printf("%d KB ", partitions[i]);
    }
    printf("\n");
}

int best_fit(int size) {
    int best_index = -1;
    int min_gap = 1000000; // a large value to start with

    for (int i = 0; i < NUM_PARTITIONS; i++) {
        if (used[i] == 0 && partitions[i] >= size) {
            int gap = partitions[i] - size;
            if (gap < min_gap) {
                best_index = i;
                min_gap = gap;
            }
        }
    }

    return best_index;
}

void allocate(int process_size) {
    int index = best_fit(process_size);
    if (index == -1) {
        printf("Cannot allocate %d KB\n", process_size);
    } else {
        used[index] = 1;
        printf("Allocated %d KB to process\n", partitions[index]);
    }
}

int main() {
    int processes[] = {115, 500, 358, 200, 375};
    int num_processes = sizeof(processes) / sizeof(processes[0]);

    print_partitions();

    for (int i = 0; i < num_processes; i++) {
        allocate(processes[i]);
    }

    return 0;
}
    printf("\n");
}

int best_fit(int size) {
    int best_index = -1;
    int min_gap = 1000000; // a large value to start with

    for (int i = 0; i < NUM_PARTITIONS; i++) {
        if (used[i] == 0 && partitions[i] >= size) {
            int gap = partitions[i] - size;
            if (gap < min_gap) {
                best_index = i;
                min_gap = gap;
            }
        }
    }

    return best_index;
}

void allocate(int process_size) {
    int index = best_fit(process_size);
    if (index == -1) {
        printf("Cannot allocate %d KB\n", process_size);
    } else {
        used[index] = 1;
        printf("Allocated %d KB to process\n", partitions[index]);
    }
}

int main() {
    int processes[] = {115, 500, 358, 200, 375};
    int num_processes = sizeof(processes) / sizeof(processes[0]);

    print_partitions();

    for (int i = 0; i < num_processes; i++) {
        allocate(processes[i]);
    }

    return 0;
}in_gap = 1000000; // a large value to start with

    for (int i = 0; i < NUM_PARTITIONS; i++) {
        if (used[i] == 0 && partitions[i] >= size) {
            int gap = partitions[i] - size;
            if (gap < min_gap) {
                best_index = i;
                min_gap = gap;
            }
        }
    }

    return best_index;
}

void allocate(int process_size) {
    int index = best_fit(process_size);
    if (index == -1) {
        printf("Cannot allocate %d KB\n", process_size);
    } else {
        used[index] = 1;
        printf("Allocated %d KB to process\n", partitions[index]);
    }
}

int main() {
    int processes[] = {115, 500, 358, 200, 375};
    int num_processes = sizeof(processes) / sizeof(processes[0]);

    print_partitions();

    for (int i = 0; i < num_processes; i++) {
        allocate(processes[i]);
    }

    return 0;
}
