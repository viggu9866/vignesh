33. Write a C program using the wait system call to synchronize the parent process and child process. 
In the parent process print the prime numbers. In the child process generate the Fibonacci series.
sol:
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

// Function to check if a number is prime
int is_prime(int num) {
    if (num <= 1) {
        return 0;
    }
    for (int i = 2; i*i <= num; i++) {
        if (num % i == 0) {
            return 0;
        }
    }
    return 1;
}

// Function to generate the Fibonacci series
void fibonacci(int n) {
    int a = 0, b = 1;
    printf("Fibonacci series:\n");
    for (int i = 0; i < n; i++) {
        printf("%d ", a);
        int c = a + b;
        a = b;
        b = c;
    }
    printf("\n");
}

int main() {
    int n = 10; // The number of Fibonacci numbers to generate

    pid_t pid = fork(); // Create a child process

    if (pid < 0) {
        fprintf(stderr, "Fork failed\n");
        exit(1);
    }
    else if (pid == 0) {
        // Child process
        fibonacci(n);
    }
    else {
        // Parent process
        int status;
        wait(&status); // Wait for the child process to finish
        printf("Prime numbers:\n");
        for (int i = 2; i <= n; i++) {
            if (is_prime(i)) {
                printf("%d ", i);
            }
        }
        printf("\n");
    }

    return 0;
}
output:

Fibonacci series:
0 1 1 2 3 5 8 13 21 34 
Prime numbers:
2 3 5 7 
