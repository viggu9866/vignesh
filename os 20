#include <stdio.h>

#define MAX_PARTITIONS 10
#define MAX_PROCESSES 10

int partitions[MAX_PARTITIONS];
int processes[MAX_PROCESSES];
int allocated[MAX_PROCESSES];

int main() {
    int np, mp;
    printf("Enter the number of memory partitions: ");
    scanf("%d", &np);
    printf("Enter the size of each memory partition:\n");
    for(int i=0; i<np; i++) {
        scanf("%d", &partitions[i]);
    }
    printf("Enter the number of processes: ");
    scanf("%d", &mp);
    printf("Enter the size of each process:\n");
    for(int i=0; i<mp; i++) {
        scanf("%d", &processes[i]);
    }

    // Worst-fit algorithm
    for(int i=0; i<mp; i++) {
        int index = -1;
        for(int j=0; j<np; j++) {
            if(partitions[j] >= processes[i]) {
                if(index == -1 || partitions[j] > partitions[index]) {
                    index = j;
                }
            }
        }
        if(index != -1) {
            allocated[i] = 1;
            partitions[index] -= processes[i];
        }
    }

    // Print allocation table
    printf("\nAllocation Table:\n");
    printf("Process\t\tSize\t\tPartition\tFragment\n");
    for(int i=0; i<mp; i++) {
        printf("%d\t\t%d KB\t\t", i+1, processes[i]);
        if(allocated[i]) {
            printf("%d\t\t%d KB\n", index+1, partitions[index]);
        }
        else {
            printf("Not allocated\t-\n");
        }
    }

    // Print remaining partitions
    printf("\nRemaining partitions:\n");
    for(int i=0; i<np; i++) {
        printf("Partition %d: %d KB\n", i+1, partitions[i]);
    }

    return 0;
}
