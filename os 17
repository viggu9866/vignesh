#include<stdio.h>

// Define a struct to represent a process
struct process {
    int pid; // process ID
    int burst_time; // CPU burst time
    int waiting_time; // waiting time
    int turnaround_time; // turnaround time
};

int main() {
    // Initialize the processes
    struct process processes[] = {
        {1, 24, 0, 0},
        {2, 3, 0, 0},
        {3, 3, 0, 0}
    };
    int n = sizeof(processes) / sizeof(processes[0]);

    // Set the quantum time slot
    int quantum = 4;

    // Initialize the total waiting time and turnaround time
    int total_waiting_time = 0, total_turnaround_time = 0;

    // Initialize the remaining burst time for each process
    int remaining_burst_time[n];
    for (int i = 0; i < n; i++) {
        remaining_burst_time[i] = processes[i].burst_time;
    }

    // Initialize the current time and a flag to indicate if all processes are complete
    int current_time = 0, all_complete = 0;

    // Execute the processes in a round-robin manner
    while (!all_complete) {
        all_complete = 1;
        for (int i = 0; i < n; i++) {
            if (remaining_burst_time[i] > 0) {
                all_complete = 0;
                if (remaining_burst_time[i] <= quantum) {
                    // The process can complete within this quantum time slot
                    current_time += remaining_burst_time[i];
                    processes[i].turnaround_time = current_time;
                    remaining_burst_time[i] = 0;
                } else {
                    // The process needs more than this quantum time slot
                    current_time += quantum;
                    remaining_burst_time[i] -= quantum;
                }
                // Calculate the waiting time for this process
                processes[i].waiting_time = current_time - processes[i].burst_time;
                if (processes[i].waiting_time < 0) {
                    processes[i].waiting_time = 0;
                }
            }
        }
    }

    // Calculate the total waiting time and total turnaround time
    for (int i = 0; i < n; i++) {
        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }

    // Calculate the average waiting time and average turnaround time
    float avg_waiting_time = (float)total_waiting_time / n;
    float avg_turnaround_time = (float)total_turnaround_time / n;

    // Print the results
    printf("Round Robin Scheduling:\n");
    printf("Process\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].burst_time, processes[i].waiting_time, processes[i].turnaround_time);
    }
    printf("Average Waiting Time: %f\n", avg_waiting_time);
    printf("Average Turnaround Time: %f\n", avg_turnaround_time);

    return 0;
}
